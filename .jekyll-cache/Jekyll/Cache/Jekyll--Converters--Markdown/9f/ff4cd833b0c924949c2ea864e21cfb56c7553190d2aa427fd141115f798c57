I"ã
<p><a href="https://ifallen.github.io">ÁâàÊùÉÊâÄÊúâ,ËΩ¨ËΩΩËØ∑Ê≥®ÊòéÂá∫Â§Ñ!</a></p>

<h2 id="itunes-searchutils-softwareebook"><code class="highlighter-rouge">iTunes SearchUtils Software/eBook..</code></h2>
<hr />

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
//
//  Search.swift
//  StoreSearch
//
//  Created by JuanFelix on 3/31/16.
//  Copyright ¬© 2016 JuanFelix. All rights reserved.
//

///itunes software  search

import UIKit

typealias SearchComplete = (content: [String : AnyObject]?,success: Bool) -&gt; Void

class SearchUtils {
    class func searchAppsWithName(name: String,completion: SearchComplete?) {
        
        if !name.isEmpty {
            // 1
            let session = NSURLSession.sharedSession()
            // 2 Ê£ÄÁ¥¢APIÂú∞ÂùÄ
            let url = urlWithSearchText(name)
            // 3
            let dataTask = session.dataTaskWithURL(url, completionHandler: { (data, response, error) in
                // 4
                if let error = error where error.code == -999{//Request canceled
                    dispatch_async(dispatch_get_main_queue()) {
                        completion?(content:nil,success:false)
                    }
                    
                    return
                }
                if let httpResponse = response as? NSHTTPURLResponse where httpResponse.statusCode == 200,
                     let data = data, dictionary = self.parseJSON(data) {
                    dispatch_async(dispatch_get_main_queue()) {
                        completion?(content:dictionary,success:true)
                    }
                }
            })
            // 5
            dataTask.resume()
        }else {
            dispatch_async(dispatch_get_main_queue()) {
                completion?(content: nil,success: false)
            }
        }
    }
    //term  : search text
    //limit : data count
    //entity: search type eg:software/ebook
    private class func urlWithSearchText(searchText: String) -&gt; NSURL {
        let escapedSearchText = searchText.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!
        let urlString = String(format: "https://itunes.apple.com/search?term=%@&amp;limit=30&amp;entity=software", escapedSearchText)
        return NSURL(string: urlString)!
    }
    
    //Json Data To Obj
    private class func parseJSON(data: NSData) -&gt; [String: AnyObject]? {
        do{
            return try NSJSONSerialization.JSONObjectWithData(data, options: []) as? [String: AnyObject]
        } catch {
            print("JSON Error: \(error)")
            return nil
        }
    }
}
</code></pre></div></div>

:ET